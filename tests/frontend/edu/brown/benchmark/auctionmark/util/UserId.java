package edu.brown.benchmark.auctionmark.util;

import edu.brown.utils.CompositeId;

public class UserId extends CompositeId {
    
    private static final long BASE_VALUE_MASK = 16777215l; // (2^24)-1
    private static final int VALUE_OFFSET = 24;

    /**
     * The size index is the position in the histogram for the number
     * of users per items size
     */
    private int itemCount;
    /**
     * The offset is based on the number of users that exist at a given size index
     */
    private int offset;
    
    public UserId() {
        // For serialization
    }

    /**
     * Constructor
     * @param itemCount
     * @param offset
     */
    public UserId(int itemCount, int offset) {
        this.itemCount = itemCount;
        this.offset = offset;
    }
    
    /**
     * Constructor
     * Converts a composite id generated by encode() into the full object
     * @param composite_id
     */
    public UserId(long composite_id) {
        this.decode(composite_id);
    }
    
    @Override
    public long encode() {
        return (this.encode(BASE_VALUE_MASK, VALUE_OFFSET));
    }
    @Override
    public void decode(long composite_id) {
        long values[] = super.decode(composite_id, new long[2], BASE_VALUE_MASK, VALUE_OFFSET);
        this.offset = (int)values[0];
        this.itemCount = (int)values[1];
    }
    @Override
    public long[] toArray() {
        return (new long[]{ this.offset, this.itemCount });
    }
    
    public int getItemCount() {
        return this.itemCount;
    }
    public int getOffset() {
        return this.offset;
    }
    
    @Override
    public String toString() {
        return String.format("UserId{itemCount=%d,offset=%d}",
                             this.itemCount, this.offset);
    }
    
    public static String toString(long userId) {
        return new UserId(userId).toString();
    }
    
    @Override
    public boolean equals(Object obj) {
        if (obj instanceof UserId) {
            UserId o = (UserId)obj;
            return (this.itemCount == o.itemCount &&
                    this.offset == o.offset);
        }
        return (false);
    }
}
